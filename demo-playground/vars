# General variables
SETUP_NAME="dyasny-demo"
DEBUG_OUTPUT="true"

# STAGES defines which stages in the deployment process will be performed. The available stages are "prov, start_vpn, k8s, prep_nodes
STAGES="prov start_vpn k8s prep_nodes"

# NOTE: If provisioning is skipped, an inventory.ini containing a bastion host and the following groups is expected in the workspace directory:
# kube-master, etcd (only required for kubespray), kube-node (all workers), k8s-cluster:clildren (containing kube-master and kube-node),
# workers (non-storage workers), mayastor (storage exporting workers)
# bastion is not required if the start_vpn stage is skipped

# PLAYBOOKS defines the list of playbooks (stored in the deployment directory) to run after all the stages are finished
#PLAYBOOKS="mayastor.yml"
PLAYBOOKS="" #colocated-nexus.yml"

# SSH connection
# NOTE: on AWS the user is preset in the AMI, and will not be respected, instead the user in OS_IMAGE will be in use, and the SSH_USER variable should match it
SSH_USER="ubuntu"
SSH_KEY=~/.ssh/id_rsa
SSH_PUBKEY=~/.ssh/id_rsa.pub


# Kubernetes installer to use. Options are kubespray, k3s, kubeadm, microk8s
K8S_INSTALLER="k3s"
KSPRAY_RELEASE="release-2.16"   # Kubespray version (git branch)
K3S_VERSION="v1.21.2+k3s1"      # K3S version
#K8S_VERSION="1.21.2"           # Kubeadm installer version
K8S_VERSION="latest"
MICROK8S_VERSION="1.21/stable"
AIO="false"
# Provisioning variables
# Platform specific vars are expected here, formatting for variables follows the terraform convention#
# NOTE: for mayastor pools to be provisioned, the device they will be on needs to be specified inside the STORAGE_NODES variable
# The msp variable should point at the device in use, it can be something as simple as /dev/sda or direct PCI e.g. pcie:///00:1f.0
# or anything else Mayastor supports (see Mayastor docs). If unsure what to choose, cerate a VM of the required type, log into it
# and review the devices available using lspci/lsblk/etc
#
#PLATFORM="azure"
#LOCATION="eastus"
#OS_IMAGE='{
#    publisher = "OpenLogic"
#    offer     = "CentOS"
#    sku       = "8_3-gen2"
#    version   = "latest"
#    }'
#OS_IMAGE='{
#    publisher = "Canonical"
#    offer     = "0001-com-ubuntu-server-focal"
#    sku       = "20_04-lts-gen2"
#    version   = "latest"
#    }'
#STORAGE_NODES='{
#    count        = 3
#    type         = "Standard_L8s_v2"
#    os_disk_size = 50
#    msp          = "uring:///dev/nvme0n1"
#    }'
#MASTER_NODES='{
#    count        = 1
#    type         = "Standard_D2s_v4"
#    os_disk_size = 40
#    }'
#WORKER_NODES='{
#    count        = 0
#    type         = "Standard_D8s_v4"
#    os_disk_size = 40
#    }'

PLATFORM="aws"
LOCATION="us-east-1"
#OS_IMAGE='{
#  ami_id = "ami-059f1cc52e6c85908"
#  user   = "centos"
#  }'
OS_IMAGE='{
    ami_id = "ami-0dd76f917833aac4b" 
    user   = "ubuntu"
}'
STORAGE_NODES='{
    count = 3
    type = "m5d.4xlarge"
    os_disk_size = 40
    msp = "uring:///dev/nvme1n1"
    }'
MASTER_NODES='{
   count = 1 
    type = "m5.xlarge"
    os_disk_size = 60
    }'
WORKER_NODES='{
    count = 0
    type = "m5.4xlarge"
    os_disk_size = 40
    }'

#Node tuning variables
NR_HUGEPAGES=2048

#Mayastor variables
CPU_LIMIT=2
MEMORY_LIMIT="2048Mi"
HUGEPAGES_2MI="2Gi"
STORAGE_PROTOCOL="nvmf"
PROJECT_NAMESPACE="default"
ENABLE_ISCSI="false"
RUN_FIO="false"
REPLICA_COUNT=3

#List of PVC dicts containing name:size
#Format:
# PVC='[
#  {"name":"pvc_name", "size":"100Gi"},
#  {"name":"other_pvc", "size":"50Gi"}
#]'

PVC='[
  {"name":"pvc0","size":"1Gi"},
  {"name":"pvc1","size":"1Gi"},
  {"name":"pvc2","size":"1Gi"}
]'

#PVC='[{"name":"pvc0","size":"10Gi"}]'


